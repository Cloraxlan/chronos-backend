{"version":3,"sources":["components/DayDropdown.tsx","components/DayRow.tsx","components/DayExplorer.tsx","components/DayPanel.tsx","components/YearPanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DayDropdown","props","useEffect","schedualSettings","setDropdown","tags","defaultValue","dropdown","toString","onChange","e","target","value","map","schedual","DayRow","useState","timeslot","name","setName","Fragment","onClick","newName","prompt","updateName","i","type","updateSave","begin","end","checked","updatePassing","defaultChecked","deleteTime","DayExplorer","day","setDay","edits","setedits","useRef","newStartTime","newEndTime","newPassingBool","tempDay","timeSlots","splice","console","log","dayName","passing","col","row","hourValues","split","Number","tempSchedualSettings","setSchedualSettings","fetch","method","headers","Accept","body","JSON","stringify","customization","current","passingString","beginValues","endValues","push","metadata","ref","DayPanel","then","results","json","scheduals","css","width","height","YearPanel","style","src","App","selected","setselected","render","setrender","pass","className","padding","backgroundColor","currentTarget","marginLeft","border","color","textDecoration","fontSize","cursor","alert","toLowerCase","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b1db371.chunk.js","sourcesContent":["import { SchedualSettings } from \"chronos-time\";\r\nimport React, { useEffect } from \"react\";\r\n\r\ninterface Props {\r\n  dropdown: string | null;\r\n  setDropdown: React.Dispatch<React.SetStateAction<string | null>>;\r\n  schedualSettings: SchedualSettings[] | null;\r\n}\r\n\r\nconst DayDropdown = (props: Props) => {\r\n  useEffect(() => {\r\n    if (props.schedualSettings) {\r\n      props.setDropdown(props.schedualSettings[0].tags[0]);\r\n    }\r\n  }, [props.schedualSettings]);\r\n  return (\r\n    <div>\r\n      {props.schedualSettings && (\r\n        <select\r\n          defaultValue={props.dropdown?.toString()}\r\n          onChange={(e) => {\r\n            props.setDropdown(e.target.value);\r\n          }}\r\n        >\r\n          {props.schedualSettings.map((schedual) => {\r\n            return <option value={schedual.tags[0]}>{schedual.tags[0]}</option>;\r\n          })}\r\n        </select>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayDropdown;\r\n","import { TimeSlot, TimeSlotSettings } from \"chronos-time\";\r\nimport React, { useState } from \"react\";\r\n\r\ninterface Props {\r\n  dayName: string;\r\n  updateSave: (\r\n    e: React.ChangeEvent<HTMLInputElement>,\r\n    col: number,\r\n    row: number\r\n  ) => void;\r\n  timeslot: TimeSlotSettings;\r\n  i: number;\r\n  updatePassing: (passing: boolean, col: number) => void;\r\n  updateName: (name: string, col: number) => void;\r\n  deleteTime: (name: string) => void;\r\n}\r\n\r\nconst DayRow = (props: Props) => {\r\n  const [name, setName] = useState(props.timeslot.name);\r\n  let checkIfPassing = () => {\r\n    if (props.timeslot.type == \"passing\") {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <tr>\r\n        <p>\r\n          {name + \"  \"}\r\n          <button\r\n            onClick={() => {\r\n              let newName = prompt(\"New Name?\");\r\n              if (!newName) {\r\n                return;\r\n              }\r\n              props.updateName(newName, props.i);\r\n              setName(newName);\r\n            }}\r\n          >\r\n            Edit\r\n          </button>\r\n        </p>\r\n        <th>\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => {\r\n              props.updateSave(e, props.i, 0);\r\n            }}\r\n            defaultValue={props.timeslot.begin.toString()}\r\n          ></input>\r\n        </th>\r\n        <th>\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => {\r\n              props.updateSave(e, props.i, 1);\r\n            }}\r\n            defaultValue={props.timeslot.end.toString()}\r\n          ></input>\r\n        </th>\r\n        <th>\r\n          <p>Passing?</p>\r\n        </th>\r\n        <th>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={(e) => {\r\n              if (e.target.checked) {\r\n                props.updatePassing(true, props.i);\r\n              } else {\r\n                props.updatePassing(false, props.i);\r\n              }\r\n            }}\r\n            defaultChecked={checkIfPassing()}\r\n          />\r\n        </th>\r\n        <th>\r\n          <button\r\n            onClick={() => {\r\n              props.deleteTime(name);\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </th>\r\n      </tr>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DayRow;\r\n","import { SchedualSettings, TimeSlot, TimeSlotSettings } from \"chronos-time\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport DayRow from \"./DayRow\";\r\n\r\ninterface Props {\r\n  dayName: string;\r\n  schedualSettings: SchedualSettings[];\r\n  setSchedualSettings: React.Dispatch<\r\n    React.SetStateAction<SchedualSettings[] | null>\r\n  >;\r\n}\r\n\r\nconst DayExplorer = (props: Props) => {\r\n  const [day, setDay] = useState<SchedualSettings | null>(null);\r\n  const [edits, setedits] = useState(0);\r\n  //ADd new\r\n  const newName = useRef<HTMLInputElement>(null);\r\n  const newStartTime = useRef<HTMLInputElement>(null);\r\n  const newEndTime = useRef<HTMLInputElement>(null);\r\n  const newPassingBool = useRef<HTMLInputElement>(null);\r\n  let add = () => {\r\n    if (\r\n      newStartTime.current &&\r\n      newEndTime.current &&\r\n      newName.current &&\r\n      newPassingBool.current\r\n    ) {\r\n      let tempDay = day;\r\n      let passingString;\r\n      if (newPassingBool.current) {\r\n        passingString = \"passing\";\r\n      } else {\r\n        passingString = \"normal\";\r\n      }\r\n      let begin: [number, number];\r\n      let beginValues = newStartTime.current.value.split(\",\");\r\n      begin = [Number(beginValues[0]), Number(beginValues[1])];\r\n      let end: [number, number];\r\n      let endValues = newEndTime.current.value.split(\",\");\r\n      end = [Number(endValues[0]), Number(endValues[1])];\r\n      tempDay?.timeSlots.push({\r\n        begin: begin,\r\n        end: end,\r\n        name: newName.current.value as string,\r\n        metadata: \"\",\r\n        type: passingString as \"passing\" | \"normal\" | undefined,\r\n      });\r\n      console.log(tempDay);\r\n      setedits(edits + 1);\r\n\r\n      setDay(tempDay);\r\n    }\r\n  };\r\n  let deleteTime = (name: string) => {\r\n    let tempDay = day;\r\n    tempDay?.timeSlots.map((value, i) => {\r\n      if (value.name == name) {\r\n        tempDay?.timeSlots.splice(i, 1);\r\n      }\r\n    });\r\n    setedits(edits + 1);\r\n\r\n    setDay(tempDay);\r\n  };\r\n  console.log(props.dayName);\r\n  useEffect(() => {\r\n    props.schedualSettings.map((schedual) => {\r\n      if (schedual.tags[0] == props.dayName) {\r\n        setDay(schedual);\r\n        console.log(schedual);\r\n      }\r\n    });\r\n  }, [props.dayName]);\r\n  let updatePassing = (passing: boolean, col: number) => {\r\n    let tempDay = day;\r\n    if (!tempDay) {\r\n      return;\r\n    }\r\n    switch (passing) {\r\n      case true:\r\n        tempDay.timeSlots[col].type = \"passing\";\r\n        break;\r\n      case false:\r\n        tempDay.timeSlots[col].type = \"normal\";\r\n        break;\r\n    }\r\n    setDay(tempDay);\r\n    console.log(day?.timeSlots[col].type);\r\n  };\r\n  let updateName = (name: string, col: number) => {\r\n    let tempDay = day;\r\n    if (!tempDay) {\r\n      return;\r\n    }\r\n    tempDay.timeSlots[col].name = name;\r\n    setDay(tempDay);\r\n    console.log(day?.timeSlots[col].type);\r\n  };\r\n  let updateSave = (\r\n    e: React.ChangeEvent<HTMLInputElement>,\r\n    col: number,\r\n    row: number\r\n  ) => {\r\n    let value: [number, number];\r\n    let hourValues = e.target.value.split(\",\");\r\n    value = [Number(hourValues[0]), Number(hourValues[1])];\r\n    let tempDay = day;\r\n    if (!tempDay) {\r\n      return;\r\n    }\r\n    switch (row) {\r\n      case 0:\r\n        tempDay.timeSlots[col].begin = value;\r\n        break;\r\n      case 1:\r\n        tempDay.timeSlots[col].end = value;\r\n        break;\r\n    }\r\n    setedits(edits + 1);\r\n    setDay(tempDay);\r\n  };\r\n  let save = () => {\r\n    props.schedualSettings.map((schedual, i) => {\r\n      if (schedual.tags[0] == props.dayName) {\r\n        let tempSchedualSettings = props.schedualSettings;\r\n        (tempSchedualSettings as SchedualSettings[])[\r\n          i\r\n        ] = day as SchedualSettings;\r\n        props.setSchedualSettings(tempSchedualSettings);\r\n      }\r\n    });\r\n    fetch(\"https://chronoshhs.herokuapp.com/admin/updatehhs\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ customization: props.schedualSettings }),\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1>{day?.tags[0]}</h1>\r\n      </div>\r\n      <table>\r\n        {day?.timeSlots.map((timeslot, i) => {\r\n          console.log(timeslot);\r\n          return (\r\n            <DayRow\r\n              dayName={props.dayName}\r\n              i={i}\r\n              timeslot={timeslot}\r\n              updateSave={updateSave}\r\n              key={day.tags[0] + i + edits}\r\n              updatePassing={updatePassing}\r\n              updateName={updateName}\r\n              deleteTime={deleteTime}\r\n            ></DayRow>\r\n          );\r\n        })}\r\n      </table>\r\n      <button onClick={save}>Save</button>\r\n      <table>\r\n        <tr>\r\n          <th>\r\n            <button onClick={add}>Add</button>\r\n          </th>\r\n          <th>\r\n            <p>Name:</p>\r\n            <input ref={newName} type=\"text\"></input>\r\n          </th>\r\n          <th>\r\n            <p>Start:</p>\r\n            <input ref={newStartTime} type=\"text\"></input>\r\n          </th>\r\n          <th>\r\n            <p>End:</p>\r\n            <input ref={newEndTime} type=\"text\"></input>\r\n          </th>\r\n          <th>\r\n            <p>Passing?:</p>\r\n            <input ref={newPassingBool} type=\"checkbox\"></input>\r\n          </th>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayExplorer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { SchedualSettings } from \"chronos-time\";\r\nimport DayDropdown from \"./DayDropdown\";\r\nimport DayExplorer from \"./DayExplorer\";\r\ninterface Props {}\r\n\r\nconst DayPanel = (props: Props) => {\r\n  const [schedualSettings, setSchedualSettings] = useState<\r\n    null | SchedualSettings[]\r\n  >(null);\r\n  const [dropdown, setDropdown] = useState<string | null>(null);\r\n  useEffect(() => {\r\n    fetch(\"https://chronoshhs.herokuapp.com/hhs\").then((results) => {\r\n      results.json().then((scheduals) => {\r\n        setSchedualSettings(scheduals.scheduals);\r\n        console.log(schedualSettings);\r\n      });\r\n    });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <DayDropdown\r\n        schedualSettings={schedualSettings}\r\n        dropdown={dropdown}\r\n        setDropdown={setDropdown}\r\n      ></DayDropdown>\r\n      {dropdown && schedualSettings && (\r\n        <DayExplorer\r\n          dayName={dropdown}\r\n          schedualSettings={schedualSettings}\r\n          setSchedualSettings={setSchedualSettings}\r\n        ></DayExplorer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayPanel;\r\n","import React, { CSSProperties } from \"react\";\r\n\r\ninterface Props {}\r\nconst css: CSSProperties = {\r\n  width: \"80vw\",\r\n  height: \"80vh\",\r\n};\r\nconst YearPanel = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <iframe\r\n        style={css}\r\n        src=\"https://docs.google.com/spreadsheets/d/1ehSc95BR3hHOO4X9-T1TEOgl5NpzG1EcVoQrbLzFKPE/edit?usp=sharing\"\r\n      ></iframe>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YearPanel;\r\n","import React, { CSSProperties, useEffect, useState } from \"react\";\nimport DayPanel from \"./components/DayPanel\";\nimport YearPanel from \"./components/YearPanel\";\nconst password = \"@123\";\nfunction App() {\n  const [selected, setselected] = useState(\"day\");\n  const [render, setrender] = useState(false);\n  useEffect(() => {\n    let pass: string = \"\";\n    while (pass != password) {\n      pass = prompt(\"Password\") as string;\n    }\n    setrender(true);\n  }, []);\n  const restart: CSSProperties = {\n    marginLeft: \"85vw\",\n    backgroundColor: \"#4CAF50\",\n    border: \"none\",\n    color: \"white\",\n    padding: \"15px 32px\",\n    textDecoration: \"none\",\n    fontSize: \"16px\",\n    cursor: \"pointer\",\n  };\n  const header: CSSProperties = {\n    padding: \"10px\",\n    backgroundColor: \"lightskyblue\",\n  };\n  return (\n    <div className=\"App\">\n      {render && (\n        <div>\n          <div style={header}>\n            <select\n              onChange={(e) => {\n                setselected(e.currentTarget.value);\n              }}\n            >\n              <option>Day</option>\n              <option>Year</option>\n            </select>\n            <button\n              style={restart}\n              onClick={() => {\n                fetch(\"https://chronoshhs.herokuapp.com/admin/restart\");\n                alert(\"Server Restarted\");\n              }}\n            >\n              Restart\n            </button>\n          </div>\n          <div>\n            {selected.toLowerCase() == \"day\" && <DayPanel></DayPanel>}\n            {selected.toLowerCase() == \"year\" && <YearPanel></YearPanel>}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}